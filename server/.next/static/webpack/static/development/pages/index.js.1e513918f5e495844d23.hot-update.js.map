{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.1e513918f5e495844d23.hot-update.js","sources":["webpack:///./games/Follow_vel.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as THREE from 'three'\r\n//import * as OBJLoader from 'three-obj-loader';\r\nimport { setParam } from \"../src/actions\";\r\n//OBJLoader(THREE);\r\n\r\n//require(\"/home/rehab/Documents/RehabRobot/server/games/sprite/crosshair.png\")\r\n//require(\"/home/rehab/Documents/RehabRobot/server/games/sprite/crosshair_yellow.png\" );\r\n\r\nclass Follow_vel extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.start = this.start.bind(this)\r\n    this.stop = this.stop.bind(this)\r\n    this.animate = this.animate.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    var bar_width = 75.0\r\n    var bar_height = 200.0\r\n    var init = 0\r\n    var falling = 0\r\n    var fall_dir = 0\r\n    var fall_speed = 0\r\n\r\n    var bar;\r\n\r\n    var group = new THREE.Group();\r\n\r\n    const width = this.mount.clientWidth\r\n    const height = this.mount.clientHeight\r\n\r\n    var scene = new THREE.Scene()\r\n    scene.background = new THREE.Color( 0x99ccff );\r\n    \r\n    var camera = new THREE.OrthographicCamera( - width / 2, width / 2, height / 2, - height / 2, -100, 500000);\r\n    camera.position.set( 0,0,10);\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\r\n    renderer.setSize(width, height)\r\n\r\n    scene.add( camera );\r\n\r\n    var blockGeometry = new THREE.BoxGeometry( bar_width, bar_height, 200 );\r\n    var blockMaterial = new THREE.MeshLambertMaterial({ color: 0x51677F });\r\n    var block = new THREE.Mesh( blockGeometry, blockMaterial );\r\n\r\n    var blockGeometry2 = new THREE.BoxGeometry( bar_width - 25, bar_height - 25, 200 );\r\n    var blockMaterial2 = new THREE.MeshLambertMaterial({ color: 0xFEFFD1 });\r\n    var block2 = new THREE.Mesh( blockGeometry2, blockMaterial2 );\r\n\r\n    var blockGeometry3 = new THREE.BoxGeometry( bar_width - 25, 5, 200 );\r\n    var blockMaterial3 = new THREE.MeshLambertMaterial({ color: 0x000000 });\r\n    var block3 = new THREE.Mesh( blockGeometry3, blockMaterial3 );\r\n\r\n    var barGeometry = new THREE.BoxGeometry( bar_width - 25, 1 , 210 );\r\n    var barMaterial = new THREE.MeshLambertMaterial({ color: 0x458B74 });\r\n    bar = new THREE.Mesh( barGeometry, barMaterial );\r\n  \r\n    block.position.set(0.0, 0.0, 0.0);\r\n    scene.add( block );\r\n\r\n    block2.position.set(0.0, 0.0, 0.0);\r\n    scene.add( block2 );\r\n\r\n    block3.position.set(0.0, 0.0, 0.0);\r\n    scene.add( block3 );\r\n\r\n    bar.position.set(0.0, 0.0, 0.0);\r\n    scene.add( bar )\r\n  \r\n    var spotLight1 = new THREE.SpotLight( 0xffffff, 1 );\r\n    spotLight1.position.set( -width/3, 200, 200 );\r\n    var spotLight2 = new THREE.SpotLight( 0xffffff, 1 );\r\n    spotLight2.position.set( -width/3, -200, 200 );\r\n    spotLight2.rotation.set( -180, 0, 0 );\r\n\r\n    //var directionalLight = new THREE.DirectionalLight( 0xffffff, 2 );\r\n    //scene.add( directionalLight );\r\n\r\n    var light = new THREE.HemisphereLight( 0xffffff, 0xffffff, 1 );\r\n    scene.add( light );\r\n    scene.add(spotLight1);\r\n\r\n    this.scene = scene\r\n    this.camera = camera\r\n    this.renderer = renderer\r\n    this.bar = bar;\r\n\r\n    this.mount.appendChild(this.renderer.domElement)\r\n    this.start()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stop()\r\n    this.mount.removeChild(this.renderer.domElement)\r\n  }\r\n\r\n  start() {\r\n    if (!this.frameId) {\r\n      this.frameId = requestAnimationFrame(this.animate)\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    cancelAnimationFrame(this.frameId)\r\n  }\r\n\r\n  animate() {\r\n\r\n    var bar_set = Math.abs(this.props.v - this.props.vdes)\r\n    this.bar.scale.set(1, bar_set + 0.01, 1)\r\n    this.bar.position.set(0, bar_set/2.0, 0)\r\n\r\n    this.renderScene()\r\n    this.frameId = window.requestAnimationFrame(this.animate)\r\n  }\r\n\r\n  renderScene() {\r\n    this.renderer.render(this.scene, this.camera)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      \r\n      <div\r\n        style={{ width: '300px', height: '400px' }}\r\n        ref={(mount) => { this.mount = mount }}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  \r\n  //map state variables to the component's state \r\n  return {\r\n    v: state.v,\r\n    vdes: state.vdes\r\n  }\r\n}\r\n\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {} //add importing action functions here\r\n)(Follow_vel);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AALA;AAMA;AACA;;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AA3HA;AACA;AA6HA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AAAA;;;;A","sourceRoot":""}