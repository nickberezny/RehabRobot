{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.b7c4bee8f11237060ad0.hot-update.js","sources":["webpack:///./games/Follow_traj.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as THREE from 'three'\r\n//import * as OBJLoader from 'three-obj-loader';\r\nimport { setParam } from \"../src/actions\";\r\n//OBJLoader(THREE);\r\n\r\nimport RunButton from '../components/Generic/RunButton'\r\n\r\n//require(\"/home/rehab/Documents/RehabRobot/server/games/sprite/crosshair.png\")\r\n//require(\"/home/rehab/Documents/RehabRobot/server/games/sprite/crosshair_yellow.png\" );\r\n\r\nclass Follow_traj extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.start = this.start.bind(this)\r\n    this.stop = this.stop.bind(this)\r\n    this.animate = this.animate.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    var points = 0;\r\n    var maxStroke = 200;\r\n    \r\n    var text5;\r\n    var Geometry4;\r\n    var Geometry3;\r\n    var Geometry2;\r\n    var Geometry1;\r\n\r\n    var group = new THREE.Group();\r\n\r\n    const width = this.mount.clientWidth\r\n    const height = this.mount.clientHeight\r\n\r\n    var scene = new THREE.Scene()\r\n    scene.background = new THREE.Color( 0xf7fdff );\r\n    \r\n    var camera = new THREE.OrthographicCamera( - width / 2, width / 2, height / 2, - height / 2, -100, 500000);\r\n    camera.position.set( 0,0,5);\r\n    scene.add( camera );\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\r\n    renderer.setSize(width, height)\r\n\r\n    var geometry = new THREE.BoxGeometry( 70, 70, 70 );\r\n\r\n    var textMaterial = new THREE.MeshBasicMaterial( { color: 0x86a5d6 } );\r\n    var plateMaterial = new THREE.MeshBasicMaterial( { color: 0x86a5d6 } );\r\n    var barMaterial = new THREE.MeshBasicMaterial( { color: 0xd1d1d1 } );\r\n    var desMaterial = new THREE.MeshBasicMaterial( { color: 0xff7272, transparent: true, opacity: 0.7 } );\r\n\r\n    var plate = new THREE.Mesh( geometry, plateMaterial );\r\n    var bar = new THREE.Mesh( geometry, barMaterial );\r\n    var desPos = new THREE.Mesh( geometry, desMaterial );\r\n\r\n    plate.position.set(0.0, 0.0, 0.0);\r\n    plate.scale.set(1.25, 0.25, 1.0);\r\n\r\n    bar.position.set(0.0, 0.0, -200);\r\n    bar.scale.set(0.75, 4.0, 1.0);\r\n\r\n    desPos.position.set(0.0, 0.0, 50);\r\n    desPos.scale.set(1.5, 0.5, 1.0);\r\n\r\n    var spotLight1 = new THREE.SpotLight( 0xffffff, 1 );\r\n    spotLight1.position.set( -width/3, 200, 200 );\r\n    var light = new THREE.HemisphereLight( 0xffffff, 0xffffff, 1 );\r\n    scene.add( light );\r\n    scene.add(spotLight1)\r\n\r\n    //group.add( plate );\r\n    scene.add( bar );\r\n    scene.add(desPos);\r\n    scene.add(plate);\r\n\r\n    var loader = new THREE.FontLoader();\r\n    this.loader = loader;\r\n\r\n    loader.load( 'static/fonts/helvetiker_regular.typeface.json', function ( font ) {\r\n       var Geometry5 = new THREE.TextGeometry( '5', {\r\n        font: font,\r\n        size: 50,\r\n        height: 10,\r\n        curveSegments: 12,\r\n        bevelEnabled: false,\r\n      } );\r\n\r\n       text5 = new THREE.Mesh( Geometry5, textMaterial );\r\n       text5.position.set(-20,0,0)\r\n       \r\n       //scene.add(text5)\r\n/*\r\n       Geometry4 = new THREE.TextGeometry( '4', {\r\n        font: font,\r\n        size: 50,\r\n        height: 10,\r\n        curveSegments: 12,\r\n        bevelEnabled: false,\r\n      } );\r\n\r\n       Geometry3 = new THREE.TextGeometry( '3', {\r\n        font: font,\r\n        size: 50,\r\n        height: 10,\r\n        curveSegments: 12,\r\n        bevelEnabled: false,\r\n      } );\r\n\r\n       Geometry2 = new THREE.TextGeometry( '2', {\r\n        font: font,\r\n        size: 50,\r\n        height: 10,\r\n        curveSegments: 12,\r\n        bevelEnabled: false,\r\n      } );\r\n\r\n       Geometry1 = new THREE.TextGeometry( '1', {\r\n        font: font,\r\n        size: 50,\r\n        height: 10,\r\n        curveSegments: 12,\r\n        bevelEnabled: false,\r\n      } );\r\n*/\r\n    } );\r\n\r\n\r\n  \r\n/*\r\n  var text4 = new THREE.Mesh( Geometry4, textMaterial );\r\n  text4.position.set(-20,0,0)\r\n\r\n  var text3 = new THREE.Mesh( Geometry3, textMaterial );\r\n  text3.position.set(-20,0,0)\r\n\r\n  var text2 = new THREE.Mesh( Geometry2, textMaterial );\r\n  text2.position.set(-20,0,0)\r\n\r\n  var text1 = new THREE.Mesh( Geometry1, textMaterial );\r\n  text1.position.set(-20,0,0)\r\n */\r\n\r\n\r\n   /* this.text4 = text4\r\n    this.text3 = text3\r\n    this.text2 = text2\r\n    this.text1 = text1\r\n*/\r\n    this.scene = scene\r\n    this.camera = camera\r\n    this.renderer = renderer\r\n\r\n    this.plate = plate\r\n    this.bar = bar\r\n    this.desPos = desPos\r\n    this.points = points\r\n\r\n    this.textMaterial = textMaterial\r\n    this.clock = new THREE.Clock()\r\n    this.timer = 0.0;\r\n    this.start_game = 0;\r\n    \r\n    this.mount.appendChild(this.renderer.domElement)\r\n\r\n    console.log('Component Mount')\r\n\r\n    this.start()\r\n\r\n    console.log('Component Mount Done')\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stop()\r\n    this.mount.removeChild(this.renderer.domElement)\r\n  }\r\n\r\n  start() {\r\n    if (!this.frameId) {\r\n      this.frameId = requestAnimationFrame(this.animate)\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    cancelAnimationFrame(this.frameId)\r\n  }\r\n\r\n  animate() {\r\n\r\n    if(!this.start_game)\r\n    {\r\n      this.timer += this.clock.getDelta()\r\n      console.log(Math.round(5 - this.time))\r\n      var current_time = Math.round(5 - this.time).toString()\r\n      var textMaterial = this.textMaterial\r\n      var scene = this.scene\r\n      this.loader.load( 'static/fonts/helvetiker_regular.typeface.json', function ( font ) {\r\n       var Geometry5 = new THREE.TextGeometry( current_time, {\r\n        font: font,\r\n        size: 50,\r\n        height: 10,\r\n        curveSegments: 12,\r\n        bevelEnabled: false,\r\n      } );\r\n\r\n       var text6 = new THREE.Mesh( Geometry5, textMaterial );\r\n       text6.position.set(-20,0,0)\r\n       scene.add(text6)\r\n\r\n       \r\n\r\n     });\r\n\r\n      if(this.timer == 5) this.start_game = 1;\r\n\r\n    }\r\n       \r\n    \r\n    this.factor = 280.0 / this.props.x_end\r\n    //console.log(this.props.x_end)\r\n    //console.log(this.factor)\r\n    this.desPos.position.y = this.factor*this.props.xdes - 140.0\r\n    this.plate.position.y = this.factor*this.props.x - 140.0\r\n\r\n    console.log(this.plate.position.y)\r\n\r\n    if(this.plate.position.y > this.desPos.position.y - 20.0 && this.plate.position.y < this.desPos.position.y + 20.0)\r\n    {\r\n      this.desPos.material.color.setHex(0x7fffa3)   \r\n    }else{\r\n      this.desPos.material.color.setHex(0xff7272)\r\n    }\r\n\r\n    this.renderScene()\r\n    this.frameId = window.requestAnimationFrame(this.animate)\r\n   \r\n  }\r\n\r\n  renderScene() {\r\n    this.renderer.render(this.scene, this.camera)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div style={{ width: '400px', height: '800px' }} ref={(mount) => { this.mount = mount }} />\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  \r\n  //map state variables to the component's state \r\n  return {\r\n    x: state.x,\r\n    xdes: state.xdes,\r\n    x_end: state.x_end,\r\n  }\r\n}\r\n\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {} //add importing action functions here\r\n)(Follow_traj);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AALA;AAMA;AACA;;;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AAIA;;;;;;;;;;;;;;AAeA;;;;;;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;;;;AA5OA;AACA;AA8OA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AAAA;;;;A","sourceRoot":""}