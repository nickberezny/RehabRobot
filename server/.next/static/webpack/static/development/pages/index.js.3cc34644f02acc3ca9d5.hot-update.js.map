{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.3cc34644f02acc3ca9d5.hot-update.js","sources":["webpack:///./games/Balance_game.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as THREE from 'three'\r\n//import * as OBJLoader from 'three-obj-loader';\r\nimport { setParam } from \"../src/actions\";\r\n//OBJLoader(THREE);\r\n\r\n//require(\"/home/rehab/Documents/RehabRobot/server/games/sprite/crosshair.png\")\r\n//require(\"/home/rehab/Documents/RehabRobot/server/games/sprite/crosshair_yellow.png\" );\r\n\r\nclass Balance_game extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.start = this.start.bind(this)\r\n    this.stop = this.stop.bind(this)\r\n    this.animate = this.animate.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    const width = this.mount.clientWidth\r\n    const height = this.mount.clientHeight\r\n\r\n    var scene = new THREE.Scene()\r\n    scene.background = new THREE.Color( 0x99ccff );\r\n    \r\n    var camera = new THREE.OrthographicCamera( - width / 2, width / 2, height / 2, - height / 2, -100, 500000);\r\n    camera.position.set( 0,0,5);\r\n    scene.add( camera );\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\r\n    renderer.setSize(width, height)\r\n\r\n    var columnMaterial = new THREE.MeshBasicMaterial( { color: 0xAFAFAF} );\r\n    var groundMaterial = new THREE.MeshBasicMaterial( { color: 0x137200} );\r\n    var characterMaterial = new THREE.MeshBasicMaterial( { color: 0x6400CF} );\r\n    var ballMaterial = new THREE.MeshBasicMaterial( { color: 0x00239B} );\r\n\r\n    var column = new THREE.Mesh( new THREE.BoxBufferGeometry( 50, 200, 10 ), columnMaterial );\r\n    column.position.set(0,-100,0)\r\n    scene.add(column)\r\n\r\n    var ground = new THREE.Mesh( new THREE.BoxBufferGeometry( 1000, 50, 10 ), groundMaterial );\r\n    ground.position.set(0,-175,0)\r\n    scene.add(ground)\r\n\r\n    var chatacter = new THREE.Mesh(new THREE.CircleBufferGeometry( 25, 32 ), characterMaterial );\r\n    chatacter.position.set(0,25,0)\r\n    scene.add(chatacter)\r\n\r\n    var ball = new THREE.Mesh(new THREE.CircleBufferGeometry( 10, 32 ), ballMaterial );\r\n    ball.position.set(100 ,25,0)\r\n    scene.add(ball)\r\n\r\n    var spotLight1 = new THREE.SpotLight( 0xffffff, 1 );\r\n    spotLight1.position.set( -width/3, 200, 200 );\r\n\r\n    var light = new THREE.HemisphereLight( 0xffffff, 0xffffff, 1 );\r\n    scene.add( light );\r\n    \r\n    scene.add(spotLight1)\r\n    scene.add( camera );\r\n\r\n    this.scene = scene\r\n    this.camera = camera\r\n    this.renderer = renderer\r\n\r\n    this.chatacter = chatacter\r\n    this.ball = ball\r\n\r\n    this.mount.appendChild(this.renderer.domElement)\r\n    this.start()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stop()\r\n    this.mount.removeChild(this.renderer.domElement)\r\n  }\r\n\r\n  start() {\r\n    if (!this.frameId) {\r\n      this.frameId = requestAnimationFrame(this.animate)\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    cancelAnimationFrame(this.frameId)\r\n  }\r\n\r\n  animate() {\r\n\r\n    this.character.position.x = this.props.x -\r\n\r\n    this.renderScene()\r\n    this.frameId = window.requestAnimationFrame(this.animate)\r\n   \r\n  }\r\n\r\n  renderScene() {\r\n    this.renderer.render(this.scene, this.camera)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      \r\n      <div\r\n        style={{ width: '900px', height: '400px' }}\r\n        ref={(mount) => { this.mount = mount }}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  \r\n  //map state variables to the component's state \r\n  return {\r\n    x: state.x,\r\n    x_ball: state.x_ball,\r\n    xdes: state.xdes\r\n  }\r\n}\r\n\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {} //add importing action functions here\r\n)(Balance_game);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AALA;AAMA;AACA;;;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAEA;AAGA;AAEA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AArGA;AACA;AAuGA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAEA;AAAA;;;;A","sourceRoot":""}