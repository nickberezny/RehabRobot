{"version":3,"file":"static/webpack/static/development/pages/index.js.2eef5ca369cb78589bb7.hot-update.js","sources":["webpack:///./games/race_game.js"],"sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport * as THREE from 'three'\n//import * as OBJLoader from 'three-obj-loader';\nimport { setParam } from \"../src/actions\";\n//OBJLoader(THREE);\n\n//require(\"/home/rehab/Documents/RehabRobot/server/games/sprite/crosshair.png\")\n//require(\"/home/rehab/Documents/RehabRobot/server/games/sprite/crosshair_yellow.png\" );\n\nclass Follow_traj extends Component {\n  constructor(props) {\n    super(props)\n\n    this.start = this.start.bind(this)\n    this.stop = this.stop.bind(this)\n    this.animate = this.animate.bind(this)\n    this.move_object = this.move_object.bind(this)\n  }\n\n  componentDidMount() {\n\n    var theta1 = 0.0\n    var theta2 = 0.0\n    var theta3 = 0.0\n\n    var race_speed1 = 0.5\n    var race_speed2 = 0.55\n    var race_speed3 = 0.48\n\n    var group = new THREE.Group();\n\n    const width = this.mount.clientWidth\n    const height = this.mount.clientHeight\n\n    var scene = new THREE.Scene()\n    scene.background = new THREE.Color( 0x99ccff );\n    \n    var camera = new THREE.PerspectiveCamera(90, window.innerWidth/window.innerHeight, 0.1, 800 );\n    camera.position.set( -95,-50,30);\n    camera.rotation.set(1.5,0.0,0.0);\n    scene.add( camera );\n\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\n    renderer.setSize(width, height)\n\n    var plateMaterial = new THREE.MeshBasicMaterial( { color: 0xcc6600} );\n    var plateMaterial2 = new THREE.MeshBasicMaterial( { color: 0x009933} );\n    var other1Material = new THREE.MeshLambertMaterial( { color: 0xff7272 } );\n    var mainMaterial = new THREE.MeshLambertMaterial( { color: 0xFFA500 } );\n    var other2Material = new THREE.MeshLambertMaterial({ color: 0xD4D1C8 });\n    var boxMaterial = new THREE.MeshLambertMaterial({ color: 0x99ccff });\n\n    var circle = new THREE.Mesh( new THREE.CircleBufferGeometry( 100, 20, 0, Math.PI * 2 ), plateMaterial );\n    circle.position.set(0,-100,0)\n    scene.add(circle)\n\n    var circle2 = new THREE.Mesh( new THREE.CircleBufferGeometry( 100, 20, 0, Math.PI * 2 ), plateMaterial );\n    circle2.position.set(0,100,0)\n    scene.add(circle2)\n\n    var plate = new THREE.Mesh( new THREE.PlaneBufferGeometry( 200, 200, 4, 4 ), plateMaterial );\n    plate.position.set(0,0,0)\n    scene.add(plate)\n\n    var circle3 = new THREE.Mesh( new THREE.CircleBufferGeometry( 60, 20, 0, Math.PI * 2 ), plateMaterial2 );\n    circle3.position.set(0,-100,0.1)\n    scene.add(circle3)\n\n    var circle4 = new THREE.Mesh( new THREE.CircleBufferGeometry( 60, 20, 0, Math.PI * 2 ), plateMaterial2 );\n    circle4.position.set(0,100,0.1)\n    scene.add(circle4)\n\n    var plate2 = new THREE.Mesh( new THREE.PlaneBufferGeometry( 120, 200, 4, 4 ), plateMaterial2 );\n    plate2.position.set(0,0,0.1)\n    scene.add(plate2)\n\n    var ground = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2000, 2000, 4, 4 ), plateMaterial2 );\n    ground.position.set(0,0,-0.1)\n    scene.add(ground)\n\n\n    var character = new THREE.Mesh( new THREE.TetrahedronBufferGeometry( 5, 0 ), mainMaterial );\n    character.position.set(-80,0,5)\n    scene.add(character)\n\n    var other = new THREE.Mesh( new THREE.BoxBufferGeometry( 5, 5, 5, 4, 4, 4 ), other1Material );\n    other.position.set(-90,0,5)\n    scene.add(other)\n\n    var other2 = new THREE.Mesh( new THREE.BoxBufferGeometry( 5, 5, 5, 4, 4, 4 ), other2Material );\n    other2.position.set(-70,0,5)\n    scene.add(other2)\n\n    var box1 = new THREE.Mesh( new THREE.BoxBufferGeometry( 5000, 5, 1000 ), boxMaterial );\n    box1.position.set(0,350,0)\n    scene.add(box1)\n\n    var spotLight1 = new THREE.SpotLight( 0xffffff, 1 );\n    spotLight1.position.set( -width/3, 200, 200 );\n\n    var light = new THREE.HemisphereLight( 0xffffff, 0xffffff, 1 );\n    scene.add( light );\n    \n    scene.add(spotLight1)\n    scene.add( camera );\n\n    this.character = character;\n    this.other = other;\n    this.other2 = other2 \n\n    this.scene = scene\n    this.camera = camera\n    this.renderer = renderer\n\n    this.theta1 = theta1\n    this.theta2 = theta2\n    this.theta3 = theta3\n\n    this.race_speed1 = race_speed1\n    this.race_speed2 = race_speed2\n    this.race_speed3 = race_speed3\n\n    this.mount.appendChild(this.renderer.domElement)\n    this.start()\n  }\n\n  componentWillUnmount() {\n    this.stop()\n    this.mount.removeChild(this.renderer.domElement)\n  }\n\n  start() {\n    if (!this.frameId) {\n      this.frameId = requestAnimationFrame(this.animate)\n    }\n  }\n\n  stop() {\n    cancelAnimationFrame(this.frameId)\n  }\n\n  move_object(object, theta, radius, race_speed) {\n\n    if(object.position.x > 0){\n      var race_dir = 1.0;\n    }else{\n      var race_dir = -1.0;\n    }\n\n    if(object.position.y > 0){\n      var turn_dir = 1.0;\n    }else{\n      var turn_dir = -1.0;\n    }\n    \n    if(Math.abs(object.position.y) < 100 ) \n    {\n      object.position.y -= race_speed*race_dir\n    }\n\n    else\n    {\n      object.position.x = -turn_dir*radius*Math.cos(theta);\n      object.position.y = turn_dir*(100.0 + radius*Math.sin(theta));\n      object.rotation.z = theta;\n    }\n  }\n\n  animate() {\n\n  if(Math.abs(this.character.position.y) >= 100 )\n      {\n        this.theta1 += race_speed1/90.0;\n      }\n      else{\n        this.theta1 = 0.0;\n      }\n      if(Math.abs(this.other.position.y) >= 100 )\n      {\n        this.theta2 += race_speed2/90.0;\n      }else{\n        this.theta2 = 0.0;\n      }\n      if(Math.abs(this.other2.position.y) >= 100 )\n      {\n        this.theta3 += race_speed3/90.0;\n      }else{\n        this.theta3 = 0.0;\n      }\n      this.props.move_object(this.character, this.theta1, 80.0, race_speed1);\n      this.props.move_object(this.other, this.theta2, 90.0, race_speed2);\n      this.props.move_object(this.other2, this.theta3, 70.0, race_speed3);\n\n      this.camera.position.x = this.character.position.x;\n      this.camera.position.y = this.character.position.y - 40.0;\n\n      this.character.rotation.x += 0.1;\n      this.character.rotation.y += 0.05;\n\n      this.other.rotation.x += 0.1;\n      this.other.rotation.y += 0.05;\n\n      this.other2.rotation.x += 0.1;\n      this.other2.rotation.y += 0.05;\n\n      this.camera.lookAt( this.character.position );\n\n    this.renderScene()\n    this.frameId = window.requestAnimationFrame(this.animate)\n   \n  }\n\n  renderScene() {\n    this.renderer.render(this.scene, this.camera)\n  }\n\n  render() {\n    return (\n      \n      <div\n        style={{ width: '900px', height: '400px' }}\n        ref={(mount) => { this.mount = mount }}\n      />\n    )\n  }\n}\n\nfunction mapStateToProps(state) {\n  \n  //map state variables to the component's state \n  return {\n    x: state.x,\n    xdes: state.xdes\n  }\n}\n\n\nexport default connect(\n  mapStateToProps,\n  {} //add importing action functions here\n)(Follow_traj);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AANA;AAOA;AACA;;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;;;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAKA;;;;AAvNA;AACA;AAyNA;AAEA;AACA;AACA;AACA;AAFA;AAIA;AACA;AAEA;AAAA;;;;A","sourceRoot":""}