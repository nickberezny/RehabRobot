{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.71a21d049362fd01710a.hot-update.js","sources":["webpack:///./games/Race_game.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as THREE from 'three'\r\n//import * as OBJLoader from 'three-obj-loader';\r\nimport { setParam } from \"../src/actions\";\r\n//OBJLoader(THREE);\r\n\r\n//require(\"/home/rehab/Documents/RehabRobot/server/games/sprite/crosshair.png\")\r\n//require(\"/home/rehab/Documents/RehabRobot/server/games/sprite/crosshair_yellow.png\" );\r\n\r\nclass Race_game extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.start = this.start.bind(this)\r\n    this.stop = this.stop.bind(this)\r\n    this.animate = this.animate.bind(this)\r\n    this.move_object = this.move_object.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    var theta1 = 0.0\r\n    var theta2 = 0.0\r\n    var theta3 = 0.0\r\n\r\n    var race_speed1 = 0.5\r\n    var race_speed2 = 0.55\r\n    var race_speed3 = 0.48\r\n\r\n    var prev_x;\r\n    var prev_time;\r\n    var curr_time;  \r\n\r\n    var group = new THREE.Group();\r\n\r\n    const width = this.mount.clientWidth\r\n    const height = this.mount.clientHeight\r\n\r\n    var scene = new THREE.Scene()\r\n    scene.background = new THREE.Color( 0x99ccff );\r\n    \r\n    var camera = new THREE.PerspectiveCamera(90, window.innerWidth/window.innerHeight, 0.1, 800 );\r\n    camera.position.set( -95,-50,30);\r\n    camera.rotation.set(1.5,0.0,0.0);\r\n    scene.add( camera );\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\r\n    renderer.setSize(width, height)\r\n\r\n    var plateMaterial = new THREE.MeshBasicMaterial( { color: 0xcc6600} );\r\n    var plateMaterial2 = new THREE.MeshBasicMaterial( { color: 0x009933} );\r\n    var other1Material = new THREE.MeshLambertMaterial( { color: 0xff7272 } );\r\n    var mainMaterial = new THREE.MeshLambertMaterial( { color: 0xFFA500 } );\r\n    var other2Material = new THREE.MeshLambertMaterial({ color: 0xD4D1C8 });\r\n    var boxMaterial = new THREE.MeshLambertMaterial({ color: 0x99ccff });\r\n\r\n    var textureLoader = new THREE.TextureLoader();\r\n    var texture_grass = textureLoader.load( \"static/textures/grass.jpg\" );\r\n    var material_grass = new THREE.MeshPhongMaterial( { color: 0xffffff, map: texture_grass } );\r\n    \r\n    var texture_track = textureLoader.load( \"static/textures/track.jpg\" );\r\n    var material_track = new THREE.MeshBasicMaterial( { color: 0xffffff, map: texture_track } );\r\n\r\n    texture_grass.wrapS = texture_grass.wrapT = THREE.RepeatWrapping;\r\n    texture_grass.repeat.set( 128, 128 );\r\n\r\n    texture_track.wrapS = texture_track.wrapT = THREE.RepeatWrapping;\r\n    texture_track.repeat.set( 8, 8 );\r\n\r\n    var circle = new THREE.Mesh( new THREE.CircleBufferGeometry( 100, 20, 0, Math.PI * 2 ), material_track );\r\n    circle.position.set(0,-100,0)\r\n    scene.add(circle)\r\n\r\n    var circle2 = new THREE.Mesh( new THREE.CircleBufferGeometry( 100, 20, 0, Math.PI * 2 ), material_track );\r\n    circle2.position.set(0,100,0)\r\n    scene.add(circle2)\r\n\r\n    var plate = new THREE.Mesh( new THREE.PlaneBufferGeometry( 200, 200, 4, 4 ), material_track );\r\n    plate.position.set(0,0,0)\r\n    scene.add(plate)\r\n\r\n    var circle3 = new THREE.Mesh( new THREE.CircleBufferGeometry( 60, 20, 0, Math.PI * 2 ), plateMaterial2 );\r\n    circle3.position.set(0,-100,0.1)\r\n    scene.add(circle3)\r\n\r\n    var circle4 = new THREE.Mesh( new THREE.CircleBufferGeometry( 60, 20, 0, Math.PI * 2 ), plateMaterial2 );\r\n    circle4.position.set(0,100,0.1)\r\n    scene.add(circle4)\r\n\r\n    var plate2 = new THREE.Mesh( new THREE.PlaneBufferGeometry( 120, 200, 4, 4 ), plateMaterial2 );\r\n    plate2.position.set(0,0,0.1)\r\n    scene.add(plate2)\r\n\r\n    \r\n\r\n    var ground = new THREE.Mesh( new THREE.PlaneBufferGeometry( 2000, 2000, 4, 4 ), plateMaterial2 );\r\n    ground.position.set(0,0,-0.1)\r\n    scene.add(ground)\r\n\r\n\r\n    var character = new THREE.Mesh( new THREE.TetrahedronBufferGeometry( 5, 0 ), mainMaterial );\r\n    character.position.set(-80,0,5)\r\n    scene.add(character)\r\n\r\n    var other = new THREE.Mesh( new THREE.BoxBufferGeometry( 5, 5, 5, 4, 4, 4 ), other1Material );\r\n    other.position.set(-90,0,5)\r\n    scene.add(other)\r\n\r\n    var other2 = new THREE.Mesh( new THREE.BoxBufferGeometry( 5, 5, 5, 4, 4, 4 ), other2Material );\r\n    other2.position.set(-70,0,5)\r\n    scene.add(other2)\r\n\r\n    var box1 = new THREE.Mesh( new THREE.BoxBufferGeometry( 5000, 5, 1000 ), boxMaterial );\r\n    box1.position.set(0,350,0)\r\n    scene.add(box1)\r\n\r\n    var spotLight1 = new THREE.SpotLight( 0xffffff, 1 );\r\n    spotLight1.position.set( -width/3, 200, 200 );\r\n\r\n    var light = new THREE.HemisphereLight( 0xffffff, 0xffffff, 1 );\r\n    scene.add( light );\r\n\r\n    var geometry = new THREE.PlaneBufferGeometry( 100, 100 );\r\n\r\n    for ( var i = 0; i < 15; i ++ ) {\r\n      var material = new THREE.MeshBasicMaterial( {\r\n        color: new THREE.Color().setHSL( 0.3, 0.75, ( i / 15 ) * 0.4 + 0.1 ),\r\n        map: texture_grass,\r\n        depthTest: false,\r\n        depthWrite: false,\r\n        transparent: true\r\n      } );\r\n      var mesh = new THREE.Mesh( geometry, material );\r\n      mesh.position.y = i * 0.25;\r\n      mesh.rotation.x = - Math.PI / 2;\r\n      scene.add( mesh );\r\n    }\r\n\r\n\r\n    scene.add(spotLight1)\r\n    scene.add( camera );\r\n\r\n    this.character = character;\r\n    this.other = other;\r\n    this.other2 = other2 \r\n\r\n    this.scene = scene\r\n    this.camera = camera\r\n    this.renderer = renderer\r\n\r\n    this.theta1 = theta1\r\n    this.theta2 = theta2\r\n    this.theta3 = theta3\r\n\r\n    this.race_speed1 = race_speed1\r\n    this.race_speed2 = race_speed2\r\n    this.race_speed3 = race_speed3\r\n\r\n    this.prev_x = prev_x; \r\n    this.prev_time = prev_time;\r\n    this.curr_time = curr_time; \r\n\r\n    this.mount.appendChild(this.renderer.domElement)\r\n    this.start()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stop()\r\n    this.mount.removeChild(this.renderer.domElement)\r\n  }\r\n\r\n  start() {\r\n    if (!this.frameId) {\r\n      this.frameId = requestAnimationFrame(this.animate)\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    cancelAnimationFrame(this.frameId)\r\n  }\r\n\r\n  move_object(object, theta, radius, race_speed) {\r\n\r\n    if(object.position.x > 0){\r\n      var race_dir = 1.0;\r\n    }else{\r\n      var race_dir = -1.0;\r\n    }\r\n\r\n    if(object.position.y > 0){\r\n      var turn_dir = 1.0;\r\n    }else{\r\n      var turn_dir = -1.0;\r\n    }\r\n    \r\n    if(Math.abs(object.position.y) < 100 ) \r\n    {\r\n      object.position.y -= race_speed*race_dir\r\n    }\r\n\r\n    else\r\n    {\r\n      object.position.x = -turn_dir*radius*Math.cos(theta);\r\n      object.position.y = turn_dir*(100.0 + radius*Math.sin(theta));\r\n      object.rotation.z = theta;\r\n    }\r\n  }\r\n\r\n  animate() {\r\n\r\n  this.race_speed1 = (200.0 - Math.abs(this.props.v - this.props.vdes)) / 300.0\r\n  \r\n  if(Math.abs(this.character.position.y) >= 100 )\r\n      {\r\n        this.theta1 += this.race_speed1/90.0;\r\n      }\r\n      else{\r\n        this.theta1 = 0.0;\r\n      }\r\n      if(Math.abs(this.other.position.y) >= 100 )\r\n      {\r\n        this.theta2 += this.race_speed2/90.0;\r\n      }else{\r\n        this.theta2 = 0.0;\r\n      }\r\n      if(Math.abs(this.other2.position.y) >= 100 )\r\n      {\r\n        this.theta3 += this.race_speed3/90.0;\r\n      }else{\r\n        this.theta3 = 0.0;\r\n      }\r\n      this.move_object(this.character, this.theta1, 80.0, this.race_speed1);\r\n      this.move_object(this.other, this.theta2, 90.0, this.race_speed2);\r\n      this.move_object(this.other2, this.theta3, 70.0, this.race_speed3);\r\n\r\n      this.camera.position.x = this.character.position.x;\r\n      this.camera.position.y = this.character.position.y - 40.0;\r\n\r\n      this.character.rotation.x += 0.1;\r\n      this.character.rotation.y += 0.05;\r\n\r\n      this.other.rotation.x += 0.1;\r\n      this.other.rotation.y += 0.05;\r\n\r\n      this.other2.rotation.x += 0.1;\r\n      this.other2.rotation.y += 0.05;\r\n\r\n      this.camera.lookAt( this.character.position );\r\n\r\n    this.renderScene()\r\n    this.frameId = window.requestAnimationFrame(this.animate)\r\n   \r\n  }\r\n\r\n  renderScene() {\r\n    this.renderer.render(this.scene, this.camera)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      \r\n      <div\r\n        style={{ width: '900px', height: '400px' }}\r\n        ref={(mount) => { this.mount = mount }}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  \r\n  //map state variables to the component's state \r\n  return {\r\n    x: state.x,\r\n    xdes: state.xdes,\r\n    v: state.v,\r\n    vdes: state.vdes\r\n  }\r\n}\r\n\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {} //add importing action functions here\r\n)(Race_game);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AACA;AANA;AAOA;AACA;;;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AALA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;;;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AAjQA;AACA;AAmQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AAAA;;;;A","sourceRoot":""}